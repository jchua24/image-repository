{"version":3,"sources":["components/Alert.js","pages/Upload.js","pages/Gallery.js","App.js","reportWebVitals.js","index.js","api/imagesAPI.js"],"names":["Alert","msg","type","useState","show","setShow","useEffect","setInterval","className","Upload","fileInputState","setFileInputState","previewSource","setPreviewSource","selectedFile","setSelectedFile","successMsg","setSuccessMsg","errMsg","setErrMsg","isLoading","setLoading","previewFile","file","reader","FileReader","readAsDataURL","onloadend","result","uploadImage","base64EncodedImage","a","APIaddImage","console","error","onSubmit","e","preventDefault","onerror","id","name","onChange","target","files","match","value","color","height","width","src","alt","style","Gallery","imageIds","setImageIds","loadImages","APIgetImages","images","map","imageId","index","cloudName","process","publicId","crop","App","to","component","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","require","config","ReactDOM","render","StrictMode","document","getElementById","__dirname","client","axios","create","get","res","data","post","status"],"mappings":"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","file":"static/js/main.810edb6e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nexport default function Alert({ msg, type }) {\n    const [show, setShow] = useState(false);\n    useEffect(() => {\n        if (msg) {\n            setShow(true);\n            setInterval(() => {\n                setShow(false);\n            }, 2000);\n        }\n    }, [msg]);\n    return <>{show && <div className={`alert alert-${type}`}>{msg}</div>}</>;\n}\n","import React, { useState } from 'react';\nimport Alert from '../components/Alert';\nimport Loader from 'react-loader-spinner'\n\nimport {APIaddImage} from \"../api/imagesAPI\"\n\nexport default function Upload() {\n    const [fileInputState, setFileInputState] = useState('');\n    const [previewSource, setPreviewSource] = useState('');\n    const [selectedFile, setSelectedFile] = useState();\n    const [successMsg, setSuccessMsg] = useState('');\n    const [errMsg, setErrMsg] = useState('');\n    const [isLoading, setLoading] = useState(false);\n\n    const handleFileInputChange = (e) => {\n        const file = e.target.files[0];\n\n        if (!file.name.match(/.(jpg|jpeg|png|gif)$/i)) {\n            setErrMsg('Please upload an image file.');\n        } else {\n            previewFile(file);\n            setSelectedFile(file);\n            setFileInputState(e.target.value);\n        }\n    };\n\n    const previewFile = (file) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file); //encodes image as a string\n        reader.onloadend = () => {\n            setPreviewSource(reader.result);\n        };\n    };\n\n    const handleSubmitFile = (e) => {\n        e.preventDefault();\n        if (!selectedFile) return;\n        const reader = new FileReader();\n        reader.readAsDataURL(selectedFile);\n        reader.onloadend = () => {\n            uploadImage(reader.result);\n        };\n        reader.onerror = () => {\n            setErrMsg('something went wrong!');\n        };\n    };\n\n    const uploadImage = async (base64EncodedImage) => {\n        setFileInputState('');\n        setPreviewSource('');\n\n        try {\n            setLoading(true);\n            await APIaddImage(base64EncodedImage); \n            setLoading(false);\n            setSuccessMsg('Image uploaded successfully');\n        } catch (err) {\n            console.error(err);\n            setErrMsg('Unable to upload file. Please try again!');\n            setLoading(false);\n        }\n       \n    };\n\n    return (\n        <div>\n            <h1 className=\"title\">Upload an Image</h1>\n            <Alert msg={errMsg} type=\"danger\" />\n            <Alert msg={successMsg} type=\"success\" />\n            <form onSubmit={handleSubmitFile} className=\"form\">\n                <input\n                    id=\"fileInput\"\n                    type=\"file\"\n                    name=\"image\"\n                    onChange={handleFileInputChange}\n                    value={fileInputState}\n                    className=\"form-input\"\n                />\n                <button className=\"btn\" type=\"submit\">\n                    Submit\n                </button>\n            </form>\n\n            {isLoading && <Loader\n                type=\"Rings\"\n                color=\"#90EE90\"\n                height={100}\n                width={100}        \n            />} \n\n            {previewSource && !isLoading &&  (\n                <img\n                    src={previewSource}\n                    alt=\"chosen\"\n                    style={{ height: '300px' }}\n                />\n            )}\n        </div>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport { Image } from 'cloudinary-react';\nimport {APIgetImages} from \"../api/imagesAPI\"\n\nexport default function Gallery() {\n    const [imageIds, setImageIds] = useState();\n\n    const loadImages = async () => {\n        try {\n            let images = await APIgetImages(); \n            setImageIds(images); \n        } catch (err) {\n            console.error(err);\n        }\n    };\n    \n    useEffect(() => {\n        loadImages();\n    }, []);\n    \n    return (\n        <div>\n            <h1 className=\"title\">Gallery</h1>\n            <div className=\"gallery\">\n                {imageIds &&\n                    imageIds.map((imageId, index) => (\n                        <Image\n                            key={index}\n                            cloudName={process.env.REACT_APP_CLOUDINARY_NAME}\n                            publicId={imageId}\n                            width=\"300\"\n                            crop=\"scale\"\n                        />\n                    ))}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Link, Switch, Route } from 'react-router-dom';\nimport Upload from './pages/Upload.js';\nimport Gallery from './pages/Gallery.js';\n\nfunction App() {\n  \n    return (\n        <div className=\"container\">\n            <Router>\n                <nav className=\"nav\">\n                    <div className=\"nav-brand\">Joshua's Image Repository</div>\n                    <ul className=\"nav-items\">\n                        <li className=\"nav-item\">\n                            <Link to=\"/\">Gallery</Link>\n                        </li>\n                        <li className=\"nav-item\">\n                            <Link to=\"/upload\">Upload</Link>\n                        </li>\n                    </ul>\n                </nav>\n                <Switch>\n                    <Route component={Upload} path=\"/upload\" />\n                    <Route component={Gallery} path=\"/\" />\n                </Switch>\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './base.css';\n\nrequire('dotenv').config()\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","\nimport axios from 'axios';\nrequire('dotenv').config({path: __dirname + '/../../.env'})\n\nconst client = axios.create();\n\nexport const APIgetImages = async () => {\n    try {\n\n        const res = await client.get('api/images');\n        return res.data; \n       \n    } catch (err) {\n        console.error(err);\n    }\n};\n\nexport const APIaddImage = async (base64EncodedImage) => {\n    try {\n      \n        const res = await client.post('/api/upload/', {data: base64EncodedImage});\n\n        if(res.status !==  200) {\n            throw \"Failed to upload image to Cloudinary.\"\n        } \n\n        return res;\n    \n      } catch (err) {\n        throw err; \n    }\n} "],"sourceRoot":""}